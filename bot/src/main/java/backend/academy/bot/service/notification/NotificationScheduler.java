package backend.academy.bot.service.notification;

import backend.academy.bot.entity.NotificationMode;
import backend.academy.bot.entity.UserSession;
import backend.academy.bot.service.base.impl.RedisUserSessionService;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.Map;
import lombok.RequiredArgsConstructor;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
 *
 * <p>–ö–∞–∂–¥—ã–π —á–∞—Å –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏ –∏, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º
 * {@link NotificationMode#DAILY_DIGEST} –∏ —á–∞—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞ —á–µ—Ä–µ–∑
 * {@link backend.academy.bot.service.notification.NotificationService}.
 */
@Component
@RequiredArgsConstructor
public class NotificationScheduler {
    private static final String header = "üì¨ Your daily digest:\n\n";

    private final RedisUserSessionService sessionService;
    private final NotificationService notificationService;

    /** –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å (cron) –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–æ–º—É –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. */
    @Scheduled(cron = "0 0 * * * *")
    public void onTheHour() {
        int nowHour = LocalTime.now(ZoneId.systemDefault()).getHour();

        Map<Long, UserSession> all = sessionService.findAllSessions();
        for (var e : all.entrySet()) {
            Long chatId = e.getKey();
            UserSession sess = e.getValue();
            if (sess.mode() == NotificationMode.DAILY_DIGEST && sess.digestHour() == nowHour) {
                notificationService.flushDigest(chatId, sess, header);
            }
        }
    }
}
